syntax = "proto3";

package axon;

option go_package = "github.com/Advik-B/Axon/pkg/axon";

// NodeType defines the behavior of a node.
enum NodeType {
    NODE_UNKNOWN = 0;
    // Execution Flow Nodes
    START = 1;          // The entry point for the main execution flow.
    END = 2;            // The termination point for the main execution flow (implies no return).
    RETURN = 3;         // Returns value(s) from a function defined by FUNC_DEF.
    // Definition Nodes (often global)
    FUNC_DEF = 4;       // Defines a function or a method.
    STRUCT_DEF = 5;     // Defines a struct type.
    CONSTANT = 6;       // Provides a static value.
    // Operational Nodes
    FUNCTION = 7;       // A call to a function or method.
    OPERATOR = 8;       // Performs a binary operation (e.g., "+", "==").
    IGNORE = 9;         // Explicitly discards an input value (like `_` in Go).
}

// VisualInfo stores the position and dimensions of a node for a GUI.
message VisualInfo {
    float x = 1;
    float y = 2;
    float width = 3;
    float height = 4;
}

// Port represents a connection point for data on a node.
message Port {
    string name = 1;      // The name of the port (e.g., "a", "user", "result").
    string type_name = 2; // The Go type this port handles (e.g., "string", "*models.User").
}

// Comment stores documentation that can be attached to nodes.
message Comment {
    string id = 1;          // Unique ID for this comment.
    string content = 2;     // The comment text (can be markdown).
}

// A Node is the core building block of an Axon graph.
message Node {
    string id = 1;                   // Unique node ID within the graph.
    NodeType type = 2;              // The behavior of this node.
    string label = 3;               // Human-readable name.
    repeated Port inputs = 4;       // Data input ports.
    repeated Port outputs = 5;      // Data output ports.

    // For FUNCTION nodes, this specifies the Go function to call.
    string impl_reference = 6;

    // Node-specific configuration.
    map<string, string> config = 7;

    // Optional visual information.
    optional VisualInfo visual_info = 8;

    // List of comment IDs attached to this node.
    repeated string comment_ids = 9;
}

// DataEdge represents a data dependency between two nodes.
message DataEdge {
    string from_node_id = 1;
    string from_port = 2;
    string to_node_id = 3;
    string to_port = 4;
}

// ExecEdge represents an execution dependency between two nodes.
message ExecEdge {
    string from_node_id = 1;
    string to_node_id = 2;
}

// A Graph is a complete Axon visual program.
message Graph {
    string id = 1;
    string name = 2;

    // Explicit list of Go packages to import.
    repeated string imports = 3;

    repeated Node nodes = 4;
    repeated DataEdge data_edges = 5;
    repeated ExecEdge exec_edges = 6;
    repeated Comment comments = 7; // A pool of all comments in the graph.
}