/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: src/lib/proto/axon.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace axon {
    export enum NodeType {
        NODE_UNKNOWN = 0,
        START = 1,
        END = 2,
        RETURN = 3,
        FUNC_DEF = 4,
        STRUCT_DEF = 5,
        CONSTANT = 6,
        FUNCTION = 7,
        OPERATOR = 8,
        IGNORE = 9
    }
    export class VisualInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            x?: number;
            y?: number;
            width?: number;
            height?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("x" in data && data.x != undefined) {
                    this.x = data.x;
                }
                if ("y" in data && data.y != undefined) {
                    this.y = data.y;
                }
                if ("width" in data && data.width != undefined) {
                    this.width = data.width;
                }
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
            }
        }
        get x() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set x(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get y() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set y(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get width() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set width(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get height() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            x?: number;
            y?: number;
            width?: number;
            height?: number;
        }): VisualInfo {
            const message = new VisualInfo({});
            if (data.x != null) {
                message.x = data.x;
            }
            if (data.y != null) {
                message.y = data.y;
            }
            if (data.width != null) {
                message.width = data.width;
            }
            if (data.height != null) {
                message.height = data.height;
            }
            return message;
        }
        toObject() {
            const data: {
                x?: number;
                y?: number;
                width?: number;
                height?: number;
            } = {};
            if (this.x != null) {
                data.x = this.x;
            }
            if (this.y != null) {
                data.y = this.y;
            }
            if (this.width != null) {
                data.width = this.width;
            }
            if (this.height != null) {
                data.height = this.height;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.x != 0)
                writer.writeFloat(1, this.x);
            if (this.y != 0)
                writer.writeFloat(2, this.y);
            if (this.width != 0)
                writer.writeFloat(3, this.width);
            if (this.height != 0)
                writer.writeFloat(4, this.height);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VisualInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VisualInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.x = reader.readFloat();
                        break;
                    case 2:
                        message.y = reader.readFloat();
                        break;
                    case 3:
                        message.width = reader.readFloat();
                        break;
                    case 4:
                        message.height = reader.readFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VisualInfo {
            return VisualInfo.deserialize(bytes);
        }
    }
    export class Port extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            type_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("type_name" in data && data.type_name != undefined) {
                    this.type_name = data.type_name;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get type_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set type_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            name?: string;
            type_name?: string;
        }): Port {
            const message = new Port({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.type_name != null) {
                message.type_name = data.type_name;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                type_name?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.type_name != null) {
                data.type_name = this.type_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.type_name.length)
                writer.writeString(2, this.type_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Port {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Port();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.type_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Port {
            return Port.deserialize(bytes);
        }
    }
    export class Comment extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            content?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("content" in data && data.content != undefined) {
                    this.content = data.content;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get content() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set content(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            id?: string;
            content?: string;
        }): Comment {
            const message = new Comment({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.content != null) {
                message.content = data.content;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                content?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.content != null) {
                data.content = this.content;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.content.length)
                writer.writeString(2, this.content);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Comment {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Comment();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.content = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Comment {
            return Comment.deserialize(bytes);
        }
    }
    export class Node extends pb_1.Message {
        #one_of_decls: number[][] = [[8]];
        constructor(data?: any[] | ({
            id?: string;
            type?: NodeType;
            label?: string;
            inputs?: Port[];
            outputs?: Port[];
            impl_reference?: string;
            config?: Map<string, string>;
            comment_ids?: string[];
        } & (({
            visual_info?: VisualInfo;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4, 5, 9], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("label" in data && data.label != undefined) {
                    this.label = data.label;
                }
                if ("inputs" in data && data.inputs != undefined) {
                    this.inputs = data.inputs;
                }
                if ("outputs" in data && data.outputs != undefined) {
                    this.outputs = data.outputs;
                }
                if ("impl_reference" in data && data.impl_reference != undefined) {
                    this.impl_reference = data.impl_reference;
                }
                if ("config" in data && data.config != undefined) {
                    this.config = data.config;
                }
                if ("visual_info" in data && data.visual_info != undefined) {
                    this.visual_info = data.visual_info;
                }
                if ("comment_ids" in data && data.comment_ids != undefined) {
                    this.comment_ids = data.comment_ids;
                }
            }
            if (!this.config)
                this.config = new Map();
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 2, NodeType.NODE_UNKNOWN) as NodeType;
        }
        set type(value: NodeType) {
            pb_1.Message.setField(this, 2, value);
        }
        get label() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set label(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get inputs() {
            return pb_1.Message.getRepeatedWrapperField(this, Port, 4) as Port[];
        }
        set inputs(value: Port[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get outputs() {
            return pb_1.Message.getRepeatedWrapperField(this, Port, 5) as Port[];
        }
        set outputs(value: Port[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get impl_reference() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set impl_reference(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get config() {
            return pb_1.Message.getField(this, 7) as any as Map<string, string>;
        }
        set config(value: Map<string, string>) {
            pb_1.Message.setField(this, 7, value as any);
        }
        get visual_info() {
            return pb_1.Message.getWrapperField(this, VisualInfo, 8) as VisualInfo;
        }
        set visual_info(value: VisualInfo) {
            pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
        }
        get has_visual_info() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get comment_ids() {
            return pb_1.Message.getFieldWithDefault(this, 9, []) as string[];
        }
        set comment_ids(value: string[]) {
            pb_1.Message.setField(this, 9, value);
        }
        get _visual_info() {
            const cases: {
                [index: number]: "none" | "visual_info";
            } = {
                0: "none",
                8: "visual_info"
            };
            return cases[pb_1.Message.computeOneofCase(this, [8])];
        }
        static fromObject(data: {
            id?: string;
            type?: NodeType;
            label?: string;
            inputs?: ReturnType<typeof Port.prototype.toObject>[];
            outputs?: ReturnType<typeof Port.prototype.toObject>[];
            impl_reference?: string;
            config?: {
                [key: string]: string;
            };
            visual_info?: ReturnType<typeof VisualInfo.prototype.toObject>;
            comment_ids?: string[];
        }): Node {
            const message = new Node({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.label != null) {
                message.label = data.label;
            }
            if (data.inputs != null) {
                message.inputs = data.inputs.map(item => Port.fromObject(item));
            }
            if (data.outputs != null) {
                message.outputs = data.outputs.map(item => Port.fromObject(item));
            }
            if (data.impl_reference != null) {
                message.impl_reference = data.impl_reference;
            }
            if (typeof data.config == "object") {
                message.config = new Map(Object.entries(data.config));
            }
            if (data.visual_info != null) {
                message.visual_info = VisualInfo.fromObject(data.visual_info);
            }
            if (data.comment_ids != null) {
                message.comment_ids = data.comment_ids;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                type?: NodeType;
                label?: string;
                inputs?: ReturnType<typeof Port.prototype.toObject>[];
                outputs?: ReturnType<typeof Port.prototype.toObject>[];
                impl_reference?: string;
                config?: {
                    [key: string]: string;
                };
                visual_info?: ReturnType<typeof VisualInfo.prototype.toObject>;
                comment_ids?: string[];
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.label != null) {
                data.label = this.label;
            }
            if (this.inputs != null) {
                data.inputs = this.inputs.map((item: Port) => item.toObject());
            }
            if (this.outputs != null) {
                data.outputs = this.outputs.map((item: Port) => item.toObject());
            }
            if (this.impl_reference != null) {
                data.impl_reference = this.impl_reference;
            }
            if (this.config != null) {
                data.config = (Object.fromEntries)(this.config);
            }
            if (this.visual_info != null) {
                data.visual_info = this.visual_info.toObject();
            }
            if (this.comment_ids != null) {
                data.comment_ids = this.comment_ids;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.type != NodeType.NODE_UNKNOWN)
                writer.writeEnum(2, this.type);
            if (this.label.length)
                writer.writeString(3, this.label);
            if (this.inputs.length)
                writer.writeRepeatedMessage(4, this.inputs, (item: Port) => item.serialize(writer));
            if (this.outputs.length)
                writer.writeRepeatedMessage(5, this.outputs, (item: Port) => item.serialize(writer));
            if (this.impl_reference.length)
                writer.writeString(6, this.impl_reference);
            for (const [key, value] of this.config) {
                writer.writeMessage(7, this.config, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (this.has_visual_info)
                writer.writeMessage(8, this.visual_info, () => this.visual_info.serialize(writer));
            if (this.comment_ids.length)
                writer.writeRepeatedString(9, this.comment_ids);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Node {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Node();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.type = reader.readEnum();
                        break;
                    case 3:
                        message.label = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.inputs, () => pb_1.Message.addToRepeatedWrapperField(message, 4, Port.deserialize(reader), Port));
                        break;
                    case 5:
                        reader.readMessage(message.outputs, () => pb_1.Message.addToRepeatedWrapperField(message, 5, Port.deserialize(reader), Port));
                        break;
                    case 6:
                        message.impl_reference = reader.readString();
                        break;
                    case 7:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.config as any, reader, reader.readString, reader.readString));
                        break;
                    case 8:
                        reader.readMessage(message.visual_info, () => message.visual_info = VisualInfo.deserialize(reader));
                        break;
                    case 9:
                        pb_1.Message.addToRepeatedField(message, 9, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Node {
            return Node.deserialize(bytes);
        }
    }
    export class DataEdge extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            from_node_id?: string;
            from_port?: string;
            to_node_id?: string;
            to_port?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("from_node_id" in data && data.from_node_id != undefined) {
                    this.from_node_id = data.from_node_id;
                }
                if ("from_port" in data && data.from_port != undefined) {
                    this.from_port = data.from_port;
                }
                if ("to_node_id" in data && data.to_node_id != undefined) {
                    this.to_node_id = data.to_node_id;
                }
                if ("to_port" in data && data.to_port != undefined) {
                    this.to_port = data.to_port;
                }
            }
        }
        get from_node_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set from_node_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get from_port() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set from_port(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get to_node_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set to_node_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get to_port() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set to_port(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            from_node_id?: string;
            from_port?: string;
            to_node_id?: string;
            to_port?: string;
        }): DataEdge {
            const message = new DataEdge({});
            if (data.from_node_id != null) {
                message.from_node_id = data.from_node_id;
            }
            if (data.from_port != null) {
                message.from_port = data.from_port;
            }
            if (data.to_node_id != null) {
                message.to_node_id = data.to_node_id;
            }
            if (data.to_port != null) {
                message.to_port = data.to_port;
            }
            return message;
        }
        toObject() {
            const data: {
                from_node_id?: string;
                from_port?: string;
                to_node_id?: string;
                to_port?: string;
            } = {};
            if (this.from_node_id != null) {
                data.from_node_id = this.from_node_id;
            }
            if (this.from_port != null) {
                data.from_port = this.from_port;
            }
            if (this.to_node_id != null) {
                data.to_node_id = this.to_node_id;
            }
            if (this.to_port != null) {
                data.to_port = this.to_port;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.from_node_id.length)
                writer.writeString(1, this.from_node_id);
            if (this.from_port.length)
                writer.writeString(2, this.from_port);
            if (this.to_node_id.length)
                writer.writeString(3, this.to_node_id);
            if (this.to_port.length)
                writer.writeString(4, this.to_port);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DataEdge {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DataEdge();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.from_node_id = reader.readString();
                        break;
                    case 2:
                        message.from_port = reader.readString();
                        break;
                    case 3:
                        message.to_node_id = reader.readString();
                        break;
                    case 4:
                        message.to_port = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DataEdge {
            return DataEdge.deserialize(bytes);
        }
    }
    export class ExecEdge extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            from_node_id?: string;
            to_node_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("from_node_id" in data && data.from_node_id != undefined) {
                    this.from_node_id = data.from_node_id;
                }
                if ("to_node_id" in data && data.to_node_id != undefined) {
                    this.to_node_id = data.to_node_id;
                }
            }
        }
        get from_node_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set from_node_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get to_node_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set to_node_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            from_node_id?: string;
            to_node_id?: string;
        }): ExecEdge {
            const message = new ExecEdge({});
            if (data.from_node_id != null) {
                message.from_node_id = data.from_node_id;
            }
            if (data.to_node_id != null) {
                message.to_node_id = data.to_node_id;
            }
            return message;
        }
        toObject() {
            const data: {
                from_node_id?: string;
                to_node_id?: string;
            } = {};
            if (this.from_node_id != null) {
                data.from_node_id = this.from_node_id;
            }
            if (this.to_node_id != null) {
                data.to_node_id = this.to_node_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.from_node_id.length)
                writer.writeString(1, this.from_node_id);
            if (this.to_node_id.length)
                writer.writeString(2, this.to_node_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExecEdge {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExecEdge();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.from_node_id = reader.readString();
                        break;
                    case 2:
                        message.to_node_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExecEdge {
            return ExecEdge.deserialize(bytes);
        }
    }
    export class Graph extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            name?: string;
            imports?: string[];
            nodes?: Node[];
            data_edges?: DataEdge[];
            exec_edges?: ExecEdge[];
            comments?: Comment[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 4, 5, 6, 7], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("imports" in data && data.imports != undefined) {
                    this.imports = data.imports;
                }
                if ("nodes" in data && data.nodes != undefined) {
                    this.nodes = data.nodes;
                }
                if ("data_edges" in data && data.data_edges != undefined) {
                    this.data_edges = data.data_edges;
                }
                if ("exec_edges" in data && data.exec_edges != undefined) {
                    this.exec_edges = data.exec_edges;
                }
                if ("comments" in data && data.comments != undefined) {
                    this.comments = data.comments;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get imports() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
        }
        set imports(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get nodes() {
            return pb_1.Message.getRepeatedWrapperField(this, Node, 4) as Node[];
        }
        set nodes(value: Node[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get data_edges() {
            return pb_1.Message.getRepeatedWrapperField(this, DataEdge, 5) as DataEdge[];
        }
        set data_edges(value: DataEdge[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get exec_edges() {
            return pb_1.Message.getRepeatedWrapperField(this, ExecEdge, 6) as ExecEdge[];
        }
        set exec_edges(value: ExecEdge[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        get comments() {
            return pb_1.Message.getRepeatedWrapperField(this, Comment, 7) as Comment[];
        }
        set comments(value: Comment[]) {
            pb_1.Message.setRepeatedWrapperField(this, 7, value);
        }
        static fromObject(data: {
            id?: string;
            name?: string;
            imports?: string[];
            nodes?: ReturnType<typeof Node.prototype.toObject>[];
            data_edges?: ReturnType<typeof DataEdge.prototype.toObject>[];
            exec_edges?: ReturnType<typeof ExecEdge.prototype.toObject>[];
            comments?: ReturnType<typeof Comment.prototype.toObject>[];
        }): Graph {
            const message = new Graph({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.imports != null) {
                message.imports = data.imports;
            }
            if (data.nodes != null) {
                message.nodes = data.nodes.map(item => Node.fromObject(item));
            }
            if (data.data_edges != null) {
                message.data_edges = data.data_edges.map(item => DataEdge.fromObject(item));
            }
            if (data.exec_edges != null) {
                message.exec_edges = data.exec_edges.map(item => ExecEdge.fromObject(item));
            }
            if (data.comments != null) {
                message.comments = data.comments.map(item => Comment.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                name?: string;
                imports?: string[];
                nodes?: ReturnType<typeof Node.prototype.toObject>[];
                data_edges?: ReturnType<typeof DataEdge.prototype.toObject>[];
                exec_edges?: ReturnType<typeof ExecEdge.prototype.toObject>[];
                comments?: ReturnType<typeof Comment.prototype.toObject>[];
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.imports != null) {
                data.imports = this.imports;
            }
            if (this.nodes != null) {
                data.nodes = this.nodes.map((item: Node) => item.toObject());
            }
            if (this.data_edges != null) {
                data.data_edges = this.data_edges.map((item: DataEdge) => item.toObject());
            }
            if (this.exec_edges != null) {
                data.exec_edges = this.exec_edges.map((item: ExecEdge) => item.toObject());
            }
            if (this.comments != null) {
                data.comments = this.comments.map((item: Comment) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.imports.length)
                writer.writeRepeatedString(3, this.imports);
            if (this.nodes.length)
                writer.writeRepeatedMessage(4, this.nodes, (item: Node) => item.serialize(writer));
            if (this.data_edges.length)
                writer.writeRepeatedMessage(5, this.data_edges, (item: DataEdge) => item.serialize(writer));
            if (this.exec_edges.length)
                writer.writeRepeatedMessage(6, this.exec_edges, (item: ExecEdge) => item.serialize(writer));
            if (this.comments.length)
                writer.writeRepeatedMessage(7, this.comments, (item: Comment) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Graph {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Graph();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    case 4:
                        reader.readMessage(message.nodes, () => pb_1.Message.addToRepeatedWrapperField(message, 4, Node.deserialize(reader), Node));
                        break;
                    case 5:
                        reader.readMessage(message.data_edges, () => pb_1.Message.addToRepeatedWrapperField(message, 5, DataEdge.deserialize(reader), DataEdge));
                        break;
                    case 6:
                        reader.readMessage(message.exec_edges, () => pb_1.Message.addToRepeatedWrapperField(message, 6, ExecEdge.deserialize(reader), ExecEdge));
                        break;
                    case 7:
                        reader.readMessage(message.comments, () => pb_1.Message.addToRepeatedWrapperField(message, 7, Comment.deserialize(reader), Comment));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Graph {
            return Graph.deserialize(bytes);
        }
    }
}
