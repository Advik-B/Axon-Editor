// source: axon.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.axon.Node');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Map');
goog.require('jspb.Message');
goog.require('proto.axon.Port');
goog.require('proto.axon.VisualInfo');

goog.forwardDeclare('proto.axon.NodeType');
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.axon.Node = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.axon.Node.repeatedFields_, null);
};
goog.inherits(proto.axon.Node, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.axon.Node.displayName = 'proto.axon.Node';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.axon.Node.repeatedFields_ = [4,5,9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.axon.Node.prototype.toObject = function(opt_includeInstance) {
  return proto.axon.Node.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.axon.Node} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.axon.Node.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    label: jspb.Message.getFieldWithDefault(msg, 3, ""),
    inputsList: jspb.Message.toObjectList(msg.getInputsList(),
    proto.axon.Port.toObject, includeInstance),
    outputsList: jspb.Message.toObjectList(msg.getOutputsList(),
    proto.axon.Port.toObject, includeInstance),
    implReference: jspb.Message.getFieldWithDefault(msg, 6, ""),
    configMap: (f = msg.getConfigMap()) ? f.toObject(includeInstance, undefined) : [],
    visualInfo: (f = msg.getVisualInfo()) && proto.axon.VisualInfo.toObject(includeInstance, f),
    commentIdsList: (f = jspb.Message.getRepeatedField(msg, 9)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.axon.Node}
 */
proto.axon.Node.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.axon.Node;
  return proto.axon.Node.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.axon.Node} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.axon.Node}
 */
proto.axon.Node.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.axon.NodeType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    case 4:
      var value = new proto.axon.Port;
      reader.readMessage(value,proto.axon.Port.deserializeBinaryFromReader);
      msg.addInputs(value);
      break;
    case 5:
      var value = new proto.axon.Port;
      reader.readMessage(value,proto.axon.Port.deserializeBinaryFromReader);
      msg.addOutputs(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setImplReference(value);
      break;
    case 7:
      var value = msg.getConfigMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 8:
      var value = new proto.axon.VisualInfo;
      reader.readMessage(value,proto.axon.VisualInfo.deserializeBinaryFromReader);
      msg.setVisualInfo(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.addCommentIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.axon.Node.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.axon.Node.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.axon.Node} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.axon.Node.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getInputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.axon.Port.serializeBinaryToWriter
    );
  }
  f = message.getOutputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.axon.Port.serializeBinaryToWriter
    );
  }
  f = message.getImplReference();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getConfigMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(7, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getVisualInfo();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.axon.VisualInfo.serializeBinaryToWriter
    );
  }
  f = message.getCommentIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      9,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.axon.Node.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.axon.Node} returns this
 */
proto.axon.Node.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional NodeType type = 2;
 * @return {!proto.axon.NodeType}
 */
proto.axon.Node.prototype.getType = function() {
  return /** @type {!proto.axon.NodeType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.axon.NodeType} value
 * @return {!proto.axon.Node} returns this
 */
proto.axon.Node.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string label = 3;
 * @return {string}
 */
proto.axon.Node.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.axon.Node} returns this
 */
proto.axon.Node.prototype.setLabel = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated Port inputs = 4;
 * @return {!Array<!proto.axon.Port>}
 */
proto.axon.Node.prototype.getInputsList = function() {
  return /** @type{!Array<!proto.axon.Port>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.axon.Port, 4));
};


/**
 * @param {!Array<!proto.axon.Port>} value
 * @return {!proto.axon.Node} returns this
*/
proto.axon.Node.prototype.setInputsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.axon.Port=} opt_value
 * @param {number=} opt_index
 * @return {!proto.axon.Port}
 */
proto.axon.Node.prototype.addInputs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.axon.Port, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.axon.Node} returns this
 */
proto.axon.Node.prototype.clearInputsList = function() {
  return this.setInputsList([]);
};


/**
 * repeated Port outputs = 5;
 * @return {!Array<!proto.axon.Port>}
 */
proto.axon.Node.prototype.getOutputsList = function() {
  return /** @type{!Array<!proto.axon.Port>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.axon.Port, 5));
};


/**
 * @param {!Array<!proto.axon.Port>} value
 * @return {!proto.axon.Node} returns this
*/
proto.axon.Node.prototype.setOutputsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.axon.Port=} opt_value
 * @param {number=} opt_index
 * @return {!proto.axon.Port}
 */
proto.axon.Node.prototype.addOutputs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.axon.Port, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.axon.Node} returns this
 */
proto.axon.Node.prototype.clearOutputsList = function() {
  return this.setOutputsList([]);
};


/**
 * optional string impl_reference = 6;
 * @return {string}
 */
proto.axon.Node.prototype.getImplReference = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.axon.Node} returns this
 */
proto.axon.Node.prototype.setImplReference = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * map<string, string> config = 7;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.axon.Node.prototype.getConfigMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 7, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.axon.Node} returns this
 */
proto.axon.Node.prototype.clearConfigMap = function() {
  this.getConfigMap().clear();
  return this;};


/**
 * optional VisualInfo visual_info = 8;
 * @return {?proto.axon.VisualInfo}
 */
proto.axon.Node.prototype.getVisualInfo = function() {
  return /** @type{?proto.axon.VisualInfo} */ (
    jspb.Message.getWrapperField(this, proto.axon.VisualInfo, 8));
};


/**
 * @param {?proto.axon.VisualInfo|undefined} value
 * @return {!proto.axon.Node} returns this
*/
proto.axon.Node.prototype.setVisualInfo = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.axon.Node} returns this
 */
proto.axon.Node.prototype.clearVisualInfo = function() {
  return this.setVisualInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.axon.Node.prototype.hasVisualInfo = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * repeated string comment_ids = 9;
 * @return {!Array<string>}
 */
proto.axon.Node.prototype.getCommentIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 9));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.axon.Node} returns this
 */
proto.axon.Node.prototype.setCommentIdsList = function(value) {
  return jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.axon.Node} returns this
 */
proto.axon.Node.prototype.addCommentIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.axon.Node} returns this
 */
proto.axon.Node.prototype.clearCommentIdsList = function() {
  return this.setCommentIdsList([]);
};


